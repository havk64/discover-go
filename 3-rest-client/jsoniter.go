// REST client

// Requirements:
// 1. In a struct.go file, create a struct that fullfil the JSON generated by
// http://www.omdbapi.com/?i=tt0372784&plot=short&r=json.

// 2. In main.go, create an HTTP client that will connect execute a GET request
// to the address http://www.omdbapi.com/?i=tt0372784&plot=short&r=json.

// 3. Parse the response of your HTTP client into the struct that you created
// in "Creating a struct from JSON"
// Change the URL ( http://www.omdbapi.com/?i=tt0372784&plot=short&r=json) so
// it can be parametrized.
// Retrieve the information and display it as below. (note that the score need
// to be converted to 100)
package main

import (
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"os"

	"github.com/json-iterator/go"
)

func main() {
	uri, err := url.Parse("http://www.omdbapi.com")
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error parsing url: %v", err)
	}
	// Create http client
	client := &http.Client{}
	// Parametrize the query
	form := &url.Values{
		"i":    {"tt0372784"},
		"plot": {"short"},
		"r":    {"json"},
	}
	uri.RawQuery = form.Encode()
	// Create the request
	req, err := http.NewRequest("GET", uri.String(), nil)
	if err != nil {
		fmt.Fprintf(os.Stderr, "request error: %v", err)
	}
	// Make the request
	res, err := client.Do(req)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Request error: %v\n", err)
		return
	}
	// Parse the json results
	var movie Movie
	body, err := ioutil.ReadAll(res.Body)
	if err != nil {
		fmt.Fprintf(os.Stderr, "error: %v\n", err)
	}
	if err := jsoniter.Unmarshal(body, &movie); err != nil {
		fmt.Println(err)
		return
	}

	// Close the response Body
	defer res.Body.Close()

	// Print the requested result
	fmt.Printf("The movie : %s was released in %v - the IMDB rating is %v%% "+
		"with %s votes\n", movie.Title, movie.Year,
		int(movie.IMDBRating*10), movie.IMDBVotes)
}
